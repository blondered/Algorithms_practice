# dynamic programming (two parameters of same nature)
"""
В левом верхнем углу прямоугольной таблицы размером N×M находится черепашка. В каждой клетке таблицы
 записано некоторое число. Черепашка может перемещаться вправо или вниз, при этом маршрут черепашки 
 заканчивается в правом нижнем углу таблицы.
Подсчитаем сумму чисел, записанных в клетках, через которую проползла черепашка (включая начальную и
 конечную клетку). Найдите наибольшее возможное значение этой суммы и маршрут, на котором 
 достигается эта сумма.

Формат ввода
В первой строке входных данных записаны два натуральных числа N и M, не превосходящих 100 — размеры 
таблицы. Далее идет N строк, каждая из которых содержит M чисел, разделенных пробелами — описание 
таблицы. Все числа в клетках таблицы целые и могут принимать значения от 0 до 100.
Формат вывода
Первая строка выходных данных содержит максимальную возможную сумму, вторая — маршрут, на котором 
достигается эта сумма. Маршрут выводится в виде последовательности, которая должна содержать N-1 
букву D, означающую передвижение вниз и M-1 букву R, означающую передвижение направо. Если таких 
последовательностей несколько, необходимо вывести ровно одну (любую) из них.
"""

def main(N, M, coord):
    dp = []
    dp_line = [coord[0][0]]
    for j in range(1, M):
        dp_line.append(dp_line[-1] + coord[0][j])
    dp.append(dp_line)

    for i in range(1, N):
        dp_line = [dp[i-1][0]+coord[i][0]]
        for j in range(1, M):
            dp_line.append(max(dp_line[j-1], dp[i-1][j])+coord[i][j])
        dp.append(dp_line)

    print(dp[-1][-1])

    path = []
    i = N - 1
    j = M - 1
    while i > 0 and j > 0:
        if dp[i-1][j] >= dp[i][j-1]:
            path.append("D")
            i -= 1
        else:
            path.append("R")
            j -= 1
    if i == 0:
        ending = ["R"] * j
    else:
        ending = ["D"] * i
    path.extend(ending)
    print(*path[::-1])

if __name__ == "__main__":
    N, M = list(map(int, input().split()))
    coord = []
    for _ in range(N):
        line = list(map(int, input().split()))
        coord.append(line)
    main(N, M, coord)
