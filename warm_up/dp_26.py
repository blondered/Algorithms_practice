# dynamic programming (two parameters of same nature)
"""
В каждой клетке прямоугольной таблицы N×M записано некоторое число. Изначально игрок находится в 
левой верхней клетке. За один ход ему разрешается перемещаться в соседнюю клетку либо вправо, либо 
вниз (влево и вверх перемещаться запрещено). При проходе через клетку с игрока берут столько 
килограммов еды, какое число записано в этой клетке (еду берут также за первую и последнюю клетки 
его пути).
Требуется найти минимальный вес еды в килограммах, отдав которую игрок может попасть в правый нижний
 угол.

Формат ввода
Вводятся два числа N и M — размеры таблицы (1≤N≤20, 1≤M≤20). Затем идет N строк по M чисел в каждой 
— размеры штрафов в килограммах за прохождение через соответствующие клетки (числа от 0 до 100).
Формат вывода
Выведите минимальный вес еды в килограммах, отдав которую можно попасть в правый нижний угол.
"""


def main(N, M, coord):
    dp = []
    dp_line = [coord[0][0]]
    for j in range(1, M):
        dp_line.append(dp_line[-1] + coord[0][j])
    dp.append(dp_line)

    for i in range(1, N):
        dp_line = [dp[i - 1][0] + coord[i][0]]
        for j in range(1, M):
            dp_line.append(min(dp_line[j - 1], dp[i - 1][j]) + coord[i][j])
        dp.append(dp_line)

    print(dp[-1][-1])


if __name__ == "__main__":
    N, M = list(map(int, input().split()))
    coord = []
    for _ in range(N):
        line = list(map(int, input().split()))
        coord.append(line)
    main(N, M, coord)
